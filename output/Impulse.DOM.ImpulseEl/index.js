// Generated by purs version 0.13.6
"use strict";
var $foreign = require("./foreign.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Debug_Trace = require("../Debug.Trace/index.js");
var Effect = require("../Effect/index.js");
var Impulse_FRP_Event = require("../Impulse.FRP.Event/index.js");
var Impulse_Util_Rebuildable = require("../Impulse.Util.Rebuildable/index.js");
var Web_Event_Event = require("../Web.Event.Event/index.js");
var Web_UIEvent_KeyboardEvent = require("../Web.UIEvent.KeyboardEvent/index.js");
var Web_UIEvent_MouseEvent = require("../Web.UIEvent.MouseEvent/index.js");
var WebEventable = function (toWebEvent) {
    this.toWebEvent = toWebEvent;
};
var webEventableWebEvent = new WebEventable(function (e) {
    return e;
});
var webEventableMouseEvent = new WebEventable(Web_UIEvent_MouseEvent.toEvent);
var webEventableKeyboardEvent = new WebEventable(Web_UIEvent_KeyboardEvent.toEvent);
var toWebEvent = function (dict) {
    return dict.toWebEvent;
};
var withPreventDefault = function (dictWebEventable) {
    return function (e) {
        return Impulse_FRP_Event.mkEvent(function (pushSelf) {
            return Data_Function.flip(Impulse_FRP_Event.consume)(e)(function (we) {
                return function __do() {
                    Web_Event_Event.preventDefault(toWebEvent(dictWebEventable)(we))();
                    return pushSelf(we)();
                };
            });
        });
    };
};
var withStopPropagation = function (dictWebEventable) {
    return function (e) {
        return Impulse_FRP_Event.mkEvent(function (pushSelf) {
            return Data_Function.flip(Impulse_FRP_Event.consume)(e)(function (we) {
                return function __do() {
                    Web_Event_Event.stopPropagation(toWebEvent(dictWebEventable)(we))();
                    return pushSelf(we)();
                };
            });
        });
    };
};
var target = function (e) {
    return $foreign.targetImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value)(e);
};
var d_m_value_e = function (dictWebEventable) {
    return function (e) {
        return Impulse_FRP_Event.mkEvent(function (pushSelf) {
            return Data_Function.flip(Impulse_FRP_Event.consume)(e)(function (we) {
                return function __do() {
                    Debug_Trace.trace()({
                        we: we
                    })(function (v) {
                        return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
                    })();
                    var m_target = target(toWebEvent(dictWebEventable)(we))();
                    return pushSelf(Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(m_target)(function (v) {
                        return v.value;
                    }))();
                };
            });
        });
    };
};
var d_value_e = function (dictWebEventable) {
    var $6 = Impulse_Util_Rebuildable.lower(Impulse_Util_Rebuildable.rebuildableEvent);
    var $7 = d_m_value_e(dictWebEventable);
    return function ($8) {
        return $6($7($8));
    };
};
module.exports = {
    WebEventable: WebEventable,
    toWebEvent: toWebEvent,
    withStopPropagation: withStopPropagation,
    withPreventDefault: withPreventDefault,
    d_m_value_e: d_m_value_e,
    d_value_e: d_value_e,
    webEventableMouseEvent: webEventableMouseEvent,
    webEventableKeyboardEvent: webEventableKeyboardEvent,
    webEventableWebEvent: webEventableWebEvent,
    elRes: $foreign.elRes,
    onClick: $foreign.onClick,
    onDoubleClick: $foreign.onDoubleClick,
    onMouseDown: $foreign.onMouseDown,
    onMouseEnter: $foreign.onMouseEnter,
    onMouseLeave: $foreign.onMouseLeave,
    onMouseMove: $foreign.onMouseMove,
    onMouseOut: $foreign.onMouseOut,
    onMouseOver: $foreign.onMouseOver,
    onMouseUp: $foreign.onMouseUp,
    onChange: $foreign.onChange,
    onTransitionEnd: $foreign.onTransitionEnd,
    onScroll: $foreign.onScroll,
    onKeyUp: $foreign.onKeyUp,
    onKeyDown: $foreign.onKeyDown,
    onKeyPress: $foreign.onKeyPress
};
