// Generated by purs version 0.13.6
"use strict";
var $foreign = require("./foreign.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Function_Uncurried = require("../Data.Function.Uncurried/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Effect = require("../Effect/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var Effect_Aff_Class = require("../Effect.Aff.Class/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var HandlerM = function (x) {
    return x;
};
var runHandlerM = function (v) {
    return function (req) {
        return function (res) {
            return function (nxt) {
                return Data_Functor["void"](Effect.functorEffect)(Effect_Aff.runAff_(Data_Either.either(Data_Function_Uncurried.runFn2($foreign["_nextWithError"])(nxt))(Control_Applicative.pure(Effect.applicativeEffect)))(v(req)(res)(nxt)));
            };
        };
    };
};
var nextThrow = function (err) {
    return function (v) {
        return function (v1) {
            return function (nxt) {
                return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)($foreign["_nextWithError"](nxt, err));
            };
        };
    };
};
var next = function (v) {
    return function (v1) {
        return function (nxt) {
            return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(nxt);
        };
    };
};
var functorHandlerM = new Data_Functor.Functor(function (f) {
    return function (v) {
        return function (req) {
            return function (resp) {
                return function (nxt) {
                    return Control_Bind.bind(Effect_Aff.bindAff)(v(req)(resp)(nxt))(function (r) {
                        return Control_Applicative.pure(Effect_Aff.applicativeAff)(f(r));
                    });
                };
            };
        };
    };
});
var applyHandlerM = new Control_Apply.Apply(function () {
    return functorHandlerM;
}, function (v) {
    return function (v1) {
        return function (req) {
            return function (resp) {
                return function (nxt) {
                    return Control_Bind.bind(Effect_Aff.bindAff)(v(req)(resp)(nxt))(function (trans) {
                        return Control_Bind.bind(Effect_Aff.bindAff)(v1(req)(resp)(nxt))(function (res) {
                            return Control_Applicative.pure(Effect_Aff.applicativeAff)(trans(res));
                        });
                    });
                };
            };
        };
    };
});
var bindHandlerM = new Control_Bind.Bind(function () {
    return applyHandlerM;
}, function (v) {
    return function (f) {
        return function (req) {
            return function (resp) {
                return function (nxt) {
                    return Control_Bind.bind(Effect_Aff.bindAff)(Control_Monad.liftM1(Effect_Aff.monadAff)(f)(v(req)(resp)(nxt)))(function (v1) {
                        return v1(req)(resp)(nxt);
                    });
                };
            };
        };
    };
});
var applicativeHandlerM = new Control_Applicative.Applicative(function () {
    return applyHandlerM;
}, function (x) {
    return function (v) {
        return function (v1) {
            return function (v2) {
                return Control_Applicative.pure(Effect_Aff.applicativeAff)(x);
            };
        };
    };
});
var monadHandlerM = new Control_Monad.Monad(function () {
    return applicativeHandlerM;
}, function () {
    return bindHandlerM;
});
var monadEffHandlerM = new Effect_Class.MonadEffect(function () {
    return monadHandlerM;
}, function (act) {
    return function (v) {
        return function (v1) {
            return function (v2) {
                return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(act);
            };
        };
    };
});
var monadAffHandlerM = new Effect_Aff_Class.MonadAff(function () {
    return monadEffHandlerM;
}, function (act) {
    return function (v) {
        return function (v1) {
            return function (v2) {
                return act;
            };
        };
    };
});
var monadThrowHandlerM = new Control_Monad_Error_Class.MonadThrow(function () {
    return monadHandlerM;
}, function (err) {
    return function (v) {
        return function (v1) {
            return function (nxt) {
                return Control_Monad_Error_Class.throwError(Effect_Aff.monadThrowAff)(err);
            };
        };
    };
});
var monadErrorHandlerM = new Control_Monad_Error_Class.MonadError(function () {
    return monadThrowHandlerM;
}, function (v) {
    return function (h) {
        return HandlerM(function (req) {
            return function (res) {
                return function (nxt) {
                    return Control_Monad_Error_Class.catchError(Effect_Aff.monadErrorAff)(v(req)(res)(nxt))(function (e) {
                        var v1 = h(e);
                        return v1(req)(res)(nxt);
                    });
                };
            };
        });
    };
});
module.exports = {
    HandlerM: HandlerM,
    runHandlerM: runHandlerM,
    next: next,
    nextThrow: nextThrow,
    functorHandlerM: functorHandlerM,
    applyHandlerM: applyHandlerM,
    applicativeHandlerM: applicativeHandlerM,
    bindHandlerM: bindHandlerM,
    monadHandlerM: monadHandlerM,
    monadEffHandlerM: monadEffHandlerM,
    monadAffHandlerM: monadAffHandlerM,
    monadThrowHandlerM: monadThrowHandlerM,
    monadErrorHandlerM: monadErrorHandlerM
};
