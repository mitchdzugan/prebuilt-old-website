// Generated by purs version 0.13.6
"use strict";
var $foreign = require("./foreign.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_Reader_Class = require("../Control.Monad.Reader.Class/index.js");
var Control_Monad_Reader_Trans = require("../Control.Monad.Reader.Trans/index.js");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect = require("../Effect/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var Foreign_Class = require("../Foreign.Class/index.js");
var Foreign_Object = require("../Foreign.Object/index.js");
var Node_Express_App = require("../Node.Express.App/index.js");
var Node_Express_Response = require("../Node.Express.Response/index.js");
var Node_Express_Types = require("../Node.Express.Types/index.js");
var Test_Unit = require("../Test.Unit/index.js");
var Test_Unit_Assert = require("../Test.Unit.Assert/index.js");
var MockRequest = function (x) {
    return x;
};
var testExpress = function (testName) {
    return function (assertions) {
        return Test_Unit.test(testName)(Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)($foreign.createMockApp))(function (mockApp) {
            return Control_Monad_Reader_Trans.runReaderT(assertions)(mockApp);
        }));
    };
};
var setupMockApp = function (app) {
    return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect_Aff.bindAff))(Control_Monad_Reader_Class.ask(Control_Monad_Reader_Trans.monadAskReaderT(Effect_Aff.monadAff)))(function (mockApp) {
        return Effect_Class.liftEffect(Control_Monad_Reader_Trans.monadEffectReader(Effect_Aff.monadEffectAff))(Node_Express_App.apply(app)(mockApp));
    });
};
var setTestHeader = Node_Express_Response.setResponseHeader("X-Test-Response-Header");
var setRouteParam = function (name) {
    return function (value) {
        return function (v) {
            return v.setRouteParam(name)(value);
        };
    };
};
var setRequestSignedCookie = function (name) {
    return function (value) {
        return function (v) {
            return v.setSignedCookie(name)(value);
        };
    };
};
var setRequestHeader = function (name) {
    return function (value) {
        return function (v) {
            return v.setHeader(name)(value);
        };
    };
};
var setRequestCookie = function (name) {
    return function (value) {
        return function (v) {
            return v.setCookie(name)(value);
        };
    };
};
var setBodyParam = function (name) {
    return function (value) {
        return function (v) {
            return v.setBodyParam(name)(value);
        };
    };
};
var setBody$prime = function (value) {
    return function (v) {
        return v.setBody(value);
    };
};
var setBody = function (value) {
    return function (v) {
        return v.setBody(Foreign_Class.encode(Foreign_Class.stringEncode)(value));
    };
};
var sendRequest = function (method) {
    return function (url) {
        return function (setupRequest) {
            return function (testResponse) {
                return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect_Aff.bindAff))(Control_Monad_Reader_Class.ask(Control_Monad_Reader_Trans.monadAskReaderT(Effect_Aff.monadAff)))(function (app) {
                    return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect_Aff.bindAff))(Effect_Class.liftEffect(Control_Monad_Reader_Trans.monadEffectReader(Effect_Aff.monadEffectAff))(Data_Functor.map(Effect.functorEffect)(setupRequest)($foreign.createMockRequest(Data_Show.show(Node_Express_Types.showMethod)(method))(url))))(function (request) {
                        return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect_Aff.bindAff))(Effect_Class.liftEffect(Control_Monad_Reader_Trans.monadEffectReader(Effect_Aff.monadEffectAff))($foreign.sendMockRequest(app)(request)))(function (response) {
                            return testResponse(response);
                        });
                    });
                });
            };
        };
    };
};
var sendError = function (method) {
    return function (url) {
        return function (error) {
            return function (testResponse) {
                return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect_Aff.bindAff))(Control_Monad_Reader_Class.ask(Control_Monad_Reader_Trans.monadAskReaderT(Effect_Aff.monadAff)))(function (app) {
                    return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect_Aff.bindAff))(Effect_Class.liftEffect(Control_Monad_Reader_Trans.monadEffectReader(Effect_Aff.monadEffectAff))($foreign.createMockRequest(Data_Show.show(Node_Express_Types.showMethod)(method))(url)))(function (request) {
                        return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect_Aff.bindAff))(Effect_Class.liftEffect(Control_Monad_Reader_Trans.monadEffectReader(Effect_Aff.monadEffectAff))($foreign.sendMockError(app)(request)(error)))(function (response) {
                            return testResponse(response);
                        });
                    });
                });
            };
        };
    };
};
var assertMatch = function (dictShow) {
    return function (dictEq) {
        return function (what) {
            return function (expected) {
                return function (actual) {
                    var message = what + (" does not match: Expected [ " + (Data_Show.show(dictShow)(expected) + (" ], Got [ " + (Data_Show.show(dictShow)(actual) + " ]"))));
                    return Test_Unit_Assert.assert(message)(Data_Eq.eq(dictEq)(expected)(actual));
                };
            };
        };
    };
};
var assertStatusCode = function (expected) {
    return function (response) {
        return Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(Effect_Aff.monadAff)(assertMatch(Data_Show.showInt)(Data_Eq.eqInt)("Status code")(expected)(response.statusCode));
    };
};
var assertInApp = function (assertion) {
    return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect_Aff.bindAff))(Control_Monad_Reader_Class.ask(Control_Monad_Reader_Trans.monadAskReaderT(Effect_Aff.monadAff)))(function (mockApp) {
        var reporter = function (result) {
            return function __do() {
                var v = Effect_Aff.launchAff(result)();
                return Data_Unit.unit;
            };
        };
        return Effect_Class.liftEffect(Control_Monad_Reader_Trans.monadEffectReader(Effect_Aff.monadEffectAff))(Node_Express_App.apply(assertion(reporter))(mockApp));
    });
};
var assertHeader = function (name) {
    return function (expected) {
        return function (response) {
            var actual = Foreign_Object.lookup(name)(response.headers);
            return Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(Effect_Aff.monadAff)(assertMatch(Data_Maybe.showMaybe(Data_Show.showString))(Data_Maybe.eqMaybe(Data_Eq.eqString))("Header '" + (name + "'"))(expected)(actual));
        };
    };
};
var assertTestHeader = function (value) {
    return function (response) {
        return assertHeader("X-Test-Response-Header")(value)(response);
    };
};
var assertData = function (expected) {
    return function (response) {
        return Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(Effect_Aff.monadAff)(assertMatch(Data_Show.showString)(Data_Eq.eqString)("Response data")(expected)(response.data));
    };
};
var assertCookieValue = function (name) {
    return function (expected) {
        return function (response) {
            var actual = Data_Functor.map(Data_Maybe.functorMaybe)(function (r) {
                return r.value;
            })(Foreign_Object.lookup(name)(response.cookies));
            return Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(Effect_Aff.monadAff)(assertMatch(Data_Maybe.showMaybe(Data_Show.showString))(Data_Maybe.eqMaybe(Data_Eq.eqString))("Cookie '" + (name + "'"))(expected)(actual));
        };
    };
};
module.exports = {
    MockRequest: MockRequest,
    setRequestHeader: setRequestHeader,
    setRouteParam: setRouteParam,
    setBody: setBody,
    "setBody'": setBody$prime,
    setBodyParam: setBodyParam,
    setRequestCookie: setRequestCookie,
    setRequestSignedCookie: setRequestSignedCookie,
    testExpress: testExpress,
    setupMockApp: setupMockApp,
    sendRequest: sendRequest,
    sendError: sendError,
    assertMatch: assertMatch,
    assertInApp: assertInApp,
    assertStatusCode: assertStatusCode,
    assertHeader: assertHeader,
    assertData: assertData,
    assertCookieValue: assertCookieValue,
    setTestHeader: setTestHeader,
    assertTestHeader: assertTestHeader,
    createMockApp: $foreign.createMockApp,
    createMockRequest: $foreign.createMockRequest
};
