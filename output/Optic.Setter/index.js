// Generated by purs version 0.13.6
"use strict";
var Data_EuclideanRing = require("../Data.EuclideanRing/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Functor_Contravariant = require("../Data.Functor.Contravariant/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Profunctor = require("../Data.Profunctor/index.js");
var Data_Ring = require("../Data.Ring/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Optic_Internal_Setter = require("../Optic.Internal.Setter/index.js");
var sets = function (dictProfunctor) {
    return function (dictProfunctor1) {
        return function (dictSettable) {
            return function (pab2qst) {
                var $17 = Optic_Internal_Setter.taintedDot(dictSettable)(dictProfunctor1);
                var $18 = Optic_Internal_Setter.untaintedDot(dictSettable)(dictProfunctor);
                return function ($19) {
                    return $17(pab2qst($18($19)));
                };
            };
        };
    };
};
var set$prime = function (sa) {
    return function (a) {
        var $20 = Data_Newtype.unwrap(Data_Identity.newtypeIdentity);
        var $21 = sa((function () {
            var $23 = Data_Function["const"](a);
            return function ($24) {
                return Data_Identity.Identity($23($24));
            };
        })());
        return function ($22) {
            return $20($21($22));
        };
    };
};
var set = function (stab) {
    return function (b) {
        var $25 = Data_Newtype.unwrap(Data_Identity.newtypeIdentity);
        var $26 = stab((function () {
            var $28 = Data_Function["const"](b);
            return function ($29) {
                return Data_Identity.Identity($28($29));
            };
        })());
        return function ($27) {
            return $25($26($27));
        };
    };
};
var setJust = function (stab) {
    return function (a) {
        return set(stab)(new Data_Maybe.Just(a));
    };
};
var over = function (dictProfunctor) {
    return function (pstab) {
        return function (pab) {
            var $30 = Data_Newtype.unwrap(Data_Identity.newtypeIdentity);
            var $31 = pstab(Data_Profunctor.rmap(dictProfunctor)(Data_Identity.Identity)(pab));
            return function ($32) {
                return $30($31($32));
            };
        };
    };
};
var sub = function (dictRing) {
    return function (staa) {
        return function (a) {
            return over(Data_Profunctor.profunctorFn)(staa)(Data_Function.flip(Data_Ring.sub(dictRing))(a));
        };
    };
};
var or = function (dictHeytingAlgebra) {
    return function (staa) {
        return function (a) {
            return over(Data_Profunctor.profunctorFn)(staa)(Data_Function.flip(Data_HeytingAlgebra.disj(dictHeytingAlgebra))(a));
        };
    };
};
var mul = function (dictSemiring) {
    return function (staa) {
        return function (a) {
            return over(Data_Profunctor.profunctorFn)(staa)(Data_Function.flip(Data_Semiring.mul(dictSemiring))(a));
        };
    };
};
var mapped = function (dictFunctor) {
    return function (dictSettable) {
        return sets(Data_Profunctor.profunctorFn)(Data_Profunctor.profunctorFn)(dictSettable)(Data_Functor.map(dictFunctor));
    };
};
var div = function (dictEuclideanRing) {
    return function (staa) {
        return function (a) {
            return over(Data_Profunctor.profunctorFn)(staa)(Data_Function.flip(Data_EuclideanRing.div(dictEuclideanRing))(a));
        };
    };
};
var contramapped = function (dictContravariant) {
    return function (dictSettable) {
        return sets(Data_Profunctor.profunctorFn)(Data_Profunctor.profunctorFn)(dictSettable)(Data_Functor_Contravariant.cmap(dictContravariant));
    };
};
var concat = function (dictSemigroup) {
    return function (staa) {
        return function (a) {
            return over(Data_Profunctor.profunctorFn)(staa)(Data_Function.flip(Data_Semigroup.append(dictSemigroup))(a));
        };
    };
};
var argument = function (dictProfunctor) {
    return function (dictSettable) {
        return sets(Data_Profunctor.profunctorFn)(Data_Profunctor.profunctorFn)(dictSettable)(Data_Profunctor.lcmap(dictProfunctor));
    };
};
var and = function (dictHeytingAlgebra) {
    return function (staa) {
        return function (a) {
            return over(Data_Profunctor.profunctorFn)(staa)(Data_Function.flip(Data_HeytingAlgebra.conj(dictHeytingAlgebra))(a));
        };
    };
};
var add = function (dictSemiring) {
    return function (staa) {
        return function (a) {
            return over(Data_Profunctor.profunctorFn)(staa)(Data_Function.flip(Data_Semiring.add(dictSemiring))(a));
        };
    };
};
module.exports = {
    argument: argument,
    contramapped: contramapped,
    mapped: mapped,
    over: over,
    set: set,
    "set'": set$prime,
    sets: sets,
    add: add,
    sub: sub,
    mul: mul,
    div: div,
    or: or,
    and: and,
    concat: concat,
    setJust: setJust
};
