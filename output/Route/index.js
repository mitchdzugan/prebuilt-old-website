// Generated by purs version 0.13.6
"use strict";
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Generic_Rep = require("../Data.Generic.Rep/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Routing_Duplex = require("../Routing.Duplex/index.js");
var Routing_Duplex_Generic = require("../Routing.Duplex.Generic/index.js");
var Routing_Duplex_Generic_Syntax = require("../Routing.Duplex.Generic.Syntax/index.js");
var Home = (function () {
    function Home() {

    };
    Home.value = new Home();
    return Home;
})();
var Resume = (function () {
    function Resume() {

    };
    Resume.value = new Resume();
    return Resume;
})();
var Impulse = (function () {
    function Impulse() {

    };
    Impulse.value = new Impulse();
    return Impulse;
})();
var $$Error = (function () {
    function $$Error() {

    };
    $$Error.value = new $$Error();
    return $$Error;
})();
var genericRoute = new Data_Generic_Rep.Generic(function (x) {
    if (x instanceof Home) {
        return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
    };
    if (x instanceof Resume) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value));
    };
    if (x instanceof Impulse) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)));
    };
    if (x instanceof $$Error) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value)));
    };
    throw new Error("Failed pattern match at Route (line 18, column 1 - line 18, column 48): " + [ x.constructor.name ]);
}, function (x) {
    if (x instanceof Data_Generic_Rep.Inl) {
        return Home.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
        return Resume.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
        return Impulse.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inr)) {
        return $$Error.value;
    };
    throw new Error("Failed pattern match at Route (line 18, column 1 - line 18, column 48): " + [ x.constructor.name ]);
});
var routeSpec = Routing_Duplex.root(Routing_Duplex_Generic.sum(genericRoute)(Routing_Duplex_Generic.gRouteSum(Routing_Duplex_Generic.gRouteConstructor(new Data_Symbol.IsSymbol(function () {
    return "Home";
}))()(Routing_Duplex_Generic.gRouteNoArguments))(Routing_Duplex_Generic.gRouteSum(Routing_Duplex_Generic.gRouteConstructor(new Data_Symbol.IsSymbol(function () {
    return "Resume";
}))()(Routing_Duplex_Generic.gRouteNoArguments))(Routing_Duplex_Generic.gRouteSum(Routing_Duplex_Generic.gRouteConstructor(new Data_Symbol.IsSymbol(function () {
    return "Impulse";
}))()(Routing_Duplex_Generic.gRouteNoArguments))(Routing_Duplex_Generic.gRouteConstructor(new Data_Symbol.IsSymbol(function () {
    return "Error";
}))()(Routing_Duplex_Generic.gRouteNoArguments)))))({
    Home: Routing_Duplex_Generic.noArgs,
    Resume: Routing_Duplex_Generic_Syntax.gsep(Routing_Duplex_Generic_Syntax.gsepStringRoute(Routing_Duplex_Generic.gRouteNoArguments))("resume")(Routing_Duplex_Generic.noArgs),
    Impulse: Routing_Duplex_Generic_Syntax.gsep(Routing_Duplex_Generic_Syntax.gsepStringRoute(Routing_Duplex_Generic.gRouteNoArguments))("impulse")(Routing_Duplex_Generic.noArgs),
    "Error": Routing_Duplex_Generic.noArgs
}));
var parseRoute = Routing_Duplex.parse(routeSpec);
var parseAnyRoute = function (path) {
    var v = parseRoute(path);
    if (v instanceof Data_Either.Right) {
        return v.value0;
    };
    if (v instanceof Data_Either.Left) {
        return $$Error.value;
    };
    throw new Error("Failed pattern match at Route (line 31, column 22 - line 33, column 18): " + [ v.constructor.name ]);
};
var toUrl = Routing_Duplex.print(routeSpec);
var showRoute = new Data_Show.Show(toUrl);
var eqRoute = new Data_Eq.Eq(function (r1) {
    return function (r2) {
        return toUrl(r1) === toUrl(r2);
    };
});
module.exports = {
    Home: Home,
    Resume: Resume,
    Impulse: Impulse,
    "Error": $$Error,
    routeSpec: routeSpec,
    parseRoute: parseRoute,
    parseAnyRoute: parseAnyRoute,
    toUrl: toUrl,
    genericRoute: genericRoute,
    eqRoute: eqRoute,
    showRoute: showRoute
};
