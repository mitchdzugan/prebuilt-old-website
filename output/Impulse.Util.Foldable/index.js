// Generated by purs version 0.13.6
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_List = require("../Data.List/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var reduceM_a = function (dictMonadRec) {
    return function (f) {
        return function (i) {
            return function (a) {
                var goRaw = function (acc) {
                    return function (v) {
                        if (v instanceof Data_List_Types.Nil) {
                            return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Done({
                                acc: acc,
                                l: Data_List_Types.Nil.value
                            }));
                        };
                        if (v instanceof Data_List_Types.Cons) {
                            return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(f(acc)(v.value0))(function (newAcc) {
                                return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Loop({
                                    acc: newAcc,
                                    l: v.value1
                                }));
                            });
                        };
                        throw new Error("Failed pattern match at Impulse.Util.Foldable (line 16, column 9 - line 16, column 56): " + [ acc.constructor.name, v.constructor.name ]);
                    };
                };
                var go = function (v) {
                    return goRaw(v.acc)(v.l);
                };
                return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go)({
                    acc: i,
                    l: Data_List.fromFoldable(Data_Foldable.foldableArray)(a)
                }))((function () {
                    var $23 = Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0());
                    return function ($24) {
                        return $23((function (v) {
                            return v.acc;
                        })($24));
                    };
                })());
            };
        };
    };
};
var reduceM = function (dictMonadRec) {
    return function (dictFoldable) {
        return function (f) {
            return function (i) {
                var $25 = reduceM_a(dictMonadRec)(f)(i);
                var $26 = Data_Array.fromFoldable(dictFoldable);
                return function ($27) {
                    return $25($26($27));
                };
            };
        };
    };
};
var forM__a = function (dictMonadRec) {
    return function (a) {
        return function (f) {
            return reduceM_a(dictMonadRec)(Data_Function["const"](f))(Data_Unit.unit)(a);
        };
    };
};
var forMi__a = function (dictMonadRec) {
    return function (a) {
        return function (f) {
            return Data_Function.flip(forM__a(dictMonadRec))(function (v) {
                return f(v.i)(v.v);
            })(Data_Array.mapWithIndex(function (i) {
                return function (v) {
                    return {
                        i: i,
                        v: v
                    };
                };
            })(a));
        };
    };
};
var forMi_ = function (dictMonadRec) {
    return function (dictFoldable) {
        return function (fldbl) {
            return function (fun) {
                return forMi__a(dictMonadRec)(Data_Array.fromFoldable(dictFoldable)(fldbl))(fun);
            };
        };
    };
};
var forM_ = function (dictMonadRec) {
    return function (dictFoldable) {
        return function (fldbl) {
            return function (fun) {
                return forM__a(dictMonadRec)(Data_Array.fromFoldable(dictFoldable)(fldbl))(fun);
            };
        };
    };
};
module.exports = {
    reduceM: reduceM,
    forM_: forM_,
    forMi_: forMi_
};
