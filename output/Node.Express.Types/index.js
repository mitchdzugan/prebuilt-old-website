// Generated by purs version 0.13.6
"use strict";
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Show = require("../Data.Show/index.js");
var Http = (function () {
    function Http() {

    };
    Http.value = new Http();
    return Http;
})();
var Https = (function () {
    function Https() {

    };
    Https.value = new Https();
    return Https;
})();
var ALL = (function () {
    function ALL() {

    };
    ALL.value = new ALL();
    return ALL;
})();
var GET = (function () {
    function GET() {

    };
    GET.value = new GET();
    return GET;
})();
var POST = (function () {
    function POST() {

    };
    POST.value = new POST();
    return POST;
})();
var PUT = (function () {
    function PUT() {

    };
    PUT.value = new PUT();
    return PUT;
})();
var DELETE = (function () {
    function DELETE() {

    };
    DELETE.value = new DELETE();
    return DELETE;
})();
var OPTIONS = (function () {
    function OPTIONS() {

    };
    OPTIONS.value = new OPTIONS();
    return OPTIONS;
})();
var HEAD = (function () {
    function HEAD() {

    };
    HEAD.value = new HEAD();
    return HEAD;
})();
var TRACE = (function () {
    function TRACE() {

    };
    TRACE.value = new TRACE();
    return TRACE;
})();
var CustomMethod = (function () {
    function CustomMethod(value0) {
        this.value0 = value0;
    };
    CustomMethod.create = function (value0) {
        return new CustomMethod(value0);
    };
    return CustomMethod;
})();
var CookieOptions = function (x) {
    return x;
};
var RoutePattern = {};
var RequestParam = {};
var showProtocol = new Data_Show.Show(function (v) {
    if (v instanceof Http) {
        return "http";
    };
    if (v instanceof Https) {
        return "https";
    };
    throw new Error("Failed pattern match at Node.Express.Types (line 14, column 1 - line 16, column 25): " + [ v.constructor.name ]);
});
var showMethod = new Data_Show.Show(function (v) {
    if (v instanceof ALL) {
        return "all";
    };
    if (v instanceof GET) {
        return "get";
    };
    if (v instanceof POST) {
        return "post";
    };
    if (v instanceof PUT) {
        return "put";
    };
    if (v instanceof DELETE) {
        return "delete";
    };
    if (v instanceof OPTIONS) {
        return "options";
    };
    if (v instanceof HEAD) {
        return "head";
    };
    if (v instanceof TRACE) {
        return "trace";
    };
    if (v instanceof CustomMethod) {
        return v.value0;
    };
    throw new Error("Failed pattern match at Node.Express.Types (line 25, column 1 - line 34, column 40): " + [ v.constructor.name ]);
});
var routeRegex = RoutePattern;
var routePath = RoutePattern;
var requestParamString = RequestParam;
var requestParamNumber = RequestParam;
var defaultCookieOptions = (function () {
    var oneYear = (((365 * 24 | 0) * 60 | 0) * 60 | 0) * 1000 | 0;
    return {
        maxAge: oneYear,
        signed: false,
        path: "/"
    };
})();
var decodeProtocol = function (v) {
    if (v === "http") {
        return new Data_Maybe.Just(Http.value);
    };
    if (v === "https") {
        return new Data_Maybe.Just(Https.value);
    };
    return Data_Maybe.Nothing.value;
};
var decodeMethod = function (v) {
    if (v === "GET") {
        return GET.value;
    };
    if (v === "POST") {
        return POST.value;
    };
    if (v === "PUT") {
        return PUT.value;
    };
    if (v === "DELETE") {
        return DELETE.value;
    };
    if (v === "OPTIONS") {
        return OPTIONS.value;
    };
    if (v === "HEAD") {
        return HEAD.value;
    };
    if (v === "TRACE") {
        return TRACE.value;
    };
    return new CustomMethod(v);
};
module.exports = {
    Http: Http,
    Https: Https,
    decodeProtocol: decodeProtocol,
    ALL: ALL,
    GET: GET,
    POST: POST,
    PUT: PUT,
    DELETE: DELETE,
    OPTIONS: OPTIONS,
    HEAD: HEAD,
    TRACE: TRACE,
    CustomMethod: CustomMethod,
    decodeMethod: decodeMethod,
    RoutePattern: RoutePattern,
    RequestParam: RequestParam,
    CookieOptions: CookieOptions,
    defaultCookieOptions: defaultCookieOptions,
    showProtocol: showProtocol,
    showMethod: showMethod,
    routePath: routePath,
    routeRegex: routeRegex,
    requestParamString: requestParamString,
    requestParamNumber: requestParamNumber
};
